{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Session Video Publisher Getting Started Supported features: Upload session videos to YouTube. Generate PyCon YouTube channel video data. Purpose: Generating PyCon YouTube channel video data for PyVideo usage To use: * Clone the project. * Add .env in project containing: # ===== Followings are for upload videos ===== # Point to the directory containing video files. # Video files should be named by the session title. They don't need to be # exactly identical, the script will use fuzzy match to find them. VIDEO_ROOT='path/to/directory/containing/video/files' # YouTube OAuth2 secret files, downloaded from Google Console. OAUTH2_CLIENT_SECRET='path/to/oauth-client-secret.json' # Get talks list API. URL='https://tw.pycon.org/2018/ccip/' # ===== Followings are for playlist generation ===== # YouTube data v3 API key YOUTUBE_API_KEY='YOUR_YOUTUBE_API_KEY' # YouTube channel information # You can provide CHANNEL_ID & PLAYLIST_TITLE # or provide PLAYLIST_ID information is enough CHANNEL_ID='YOUR_YOUTUBE_CHANNEL_ID' PLAYLIST_TITLE='YOUR_YOUTUBE_PLAYLIST_TITLE' # ===== Followings are for both actions ===== # First day of the conference. YEAR='2020' MONTH='9' DAY='5' pipenv sync pipenv run upload for uploading session videos pipenv run playlist for generating video playlist data Troubleshooting The overall flow looks like the following: No 2FA may be a must. If your uploading device is the 1st time to upload, or your last uploading is too long ago, you may need an SMS validation for your device because of security concern. The corresponding credential json may need to update (by the channel owner of youtube/gmail account) This app needs approval by the channel owner's youtube/gmail account (via web browser by clicking the authorization link). In 2020 we are aware that Google Security Team will review your uploaded videos via your customized application. The uploaded videos are \"private(locked)\" by default and not allowed to set as \"public\" manually until the approval of Google Security Team. Contributing See Contributing Created from Lee-W/cookiecutter-python-template version 1.4.0","title":"Home"},{"location":"#session-video-publisher","text":"","title":"Session Video Publisher"},{"location":"#getting-started","text":"Supported features: Upload session videos to YouTube. Generate PyCon YouTube channel video data. Purpose: Generating PyCon YouTube channel video data for PyVideo usage To use: * Clone the project. * Add .env in project containing: # ===== Followings are for upload videos ===== # Point to the directory containing video files. # Video files should be named by the session title. They don't need to be # exactly identical, the script will use fuzzy match to find them. VIDEO_ROOT='path/to/directory/containing/video/files' # YouTube OAuth2 secret files, downloaded from Google Console. OAUTH2_CLIENT_SECRET='path/to/oauth-client-secret.json' # Get talks list API. URL='https://tw.pycon.org/2018/ccip/' # ===== Followings are for playlist generation ===== # YouTube data v3 API key YOUTUBE_API_KEY='YOUR_YOUTUBE_API_KEY' # YouTube channel information # You can provide CHANNEL_ID & PLAYLIST_TITLE # or provide PLAYLIST_ID information is enough CHANNEL_ID='YOUR_YOUTUBE_CHANNEL_ID' PLAYLIST_TITLE='YOUR_YOUTUBE_PLAYLIST_TITLE' # ===== Followings are for both actions ===== # First day of the conference. YEAR='2020' MONTH='9' DAY='5' pipenv sync pipenv run upload for uploading session videos pipenv run playlist for generating video playlist data","title":"Getting Started"},{"location":"#troubleshooting","text":"The overall flow looks like the following: No 2FA may be a must. If your uploading device is the 1st time to upload, or your last uploading is too long ago, you may need an SMS validation for your device because of security concern. The corresponding credential json may need to update (by the channel owner of youtube/gmail account) This app needs approval by the channel owner's youtube/gmail account (via web browser by clicking the authorization link). In 2020 we are aware that Google Security Team will review your uploaded videos via your customized application. The uploaded videos are \"private(locked)\" by default and not allowed to set as \"public\" manually until the approval of Google Security Team.","title":"Troubleshooting"},{"location":"#contributing","text":"See Contributing Created from Lee-W/cookiecutter-python-template version 1.4.0","title":"Contributing"},{"location":"contributing/","text":"Step 1. Fork this repository to your GitHub Step 2. Clone the repository from your GitHub git clone https://github.com/[YOUR GITHUB ACCOUNT]/session-video-publisher.git Step 3. Add this repository to the remote in your local repository git remote add upstream \"https://github.com/pycontw/session-video-publisher\" You can pull the latest code in main branch through git pull upstream main afterward. Step 4. Check out a branch for your new feature git checkout -b [YOUR FEATURE] Step 5. Install prerequisite python -m pip install pipx python -m pipx install pipenv invoke python -m pipx ensurepath pipx : for python tool management pipenv : for dependency management invoke : for task management Step 6. Create your local Python virtual environment and install dependencies inv env.init-dev Step 7. Work on your new feature Note that this project follows conventional-commit and bumps version based on it. Use the following command to commit your changes. inv git.commit Step 8. Run test cases Make sure all test cases pass. inv test Step 9. Run test coverage Check the test coverage and see where you can add test cases. inv test.cov Step 10. Reformat source code Format your code through black and isort . inv style.reformat Step 11. Run style check Make sure your coding style passes all enforced linters. inv style [Optional] Check your coding style through pylint . Note that you do not have to fix all the issues warned by pylint . inv style.pylint Step 12. Run security check Ensure the packages installed are secure, and no server vulnerability is introduced inv secure Step 13. Create a Pull Request and celebrate \ud83c\udf89","title":"Contributing"},{"location":"contributing/#step-1-fork-this-repository-to-your-github","text":"","title":"Step 1. Fork this repository to your GitHub"},{"location":"contributing/#step-2-clone-the-repository-from-your-github","text":"git clone https://github.com/[YOUR GITHUB ACCOUNT]/session-video-publisher.git","title":"Step 2. Clone the repository from your GitHub"},{"location":"contributing/#step-3-add-this-repository-to-the-remote-in-your-local-repository","text":"git remote add upstream \"https://github.com/pycontw/session-video-publisher\" You can pull the latest code in main branch through git pull upstream main afterward.","title":"Step 3. Add this repository to the remote in your local repository"},{"location":"contributing/#step-4-check-out-a-branch-for-your-new-feature","text":"git checkout -b [YOUR FEATURE]","title":"Step 4. Check out a branch for your new feature"},{"location":"contributing/#step-5-install-prerequisite","text":"python -m pip install pipx python -m pipx install pipenv invoke python -m pipx ensurepath pipx : for python tool management pipenv : for dependency management invoke : for task management","title":"Step 5. Install prerequisite"},{"location":"contributing/#step-6-create-your-local-python-virtual-environment-and-install-dependencies","text":"inv env.init-dev","title":"Step 6. Create your local Python virtual environment and install dependencies"},{"location":"contributing/#step-7-work-on-your-new-feature","text":"Note that this project follows conventional-commit and bumps version based on it. Use the following command to commit your changes. inv git.commit","title":"Step 7. Work on your new feature"},{"location":"contributing/#step-8-run-test-cases","text":"Make sure all test cases pass. inv test","title":"Step 8. Run test cases"},{"location":"contributing/#step-9-run-test-coverage","text":"Check the test coverage and see where you can add test cases. inv test.cov","title":"Step 9. Run test coverage"},{"location":"contributing/#step-10-reformat-source-code","text":"Format your code through black and isort . inv style.reformat","title":"Step 10. Reformat source code"},{"location":"contributing/#step-11-run-style-check","text":"Make sure your coding style passes all enforced linters. inv style [Optional] Check your coding style through pylint . Note that you do not have to fix all the issues warned by pylint . inv style.pylint","title":"Step 11. Run style check"},{"location":"contributing/#step-12-run-security-check","text":"Ensure the packages installed are secure, and no server vulnerability is introduced inv secure","title":"Step 12. Run security check"},{"location":"contributing/#step-13-create-a-pull-request-and-celebrate","text":"","title":"Step 13. Create a Pull Request and celebrate \ud83c\udf89"}]}